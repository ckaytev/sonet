{
    admin :2019
}

pki.{{ conf['domain'] }}:443 {
{% if generate_service_certs is defined -%}
{%- if generate_service_certs is sameas true %}
    tls /etc/pki/tls/certs/pki.{{ conf['domain'] }}.crt /etc/pki/tls/private/pki.{{ conf['domain'] }}.key
{%- endif -%}
{%- endif %}

{% if (caddy['basic_auth_user'] is defined) and (caddy['basic_auth_pass_hash'] is defined) -%}
    basicauth {
        {{ caddy['basic_auth_user'] }} {{ caddy['basic_auth_pass_hash'] }}
    }
{%- endif %}

    file_server browse {
        root /opt/caddy/pki/
    }

    log {
        output file /var/log/caddy/pki.{{ conf['domain'] }}.log
    }
}

ldapadmin.{{ conf['domain'] }}:443 {
{% if generate_service_certs is defined -%}
{%- if generate_service_certs is sameas true %}
    tls /etc/pki/tls/certs/ldapadmin.{{ conf['domain'] }}.crt /etc/pki/tls/private/ldapadmin.{{ conf['domain'] }}.key
{%- endif -%}
{%- endif %}

{% if (caddy['basic_auth_user'] is defined) and (caddy['basic_auth_pass_hash'] is defined) -%}
    basicauth {
        {{ caddy['basic_auth_user'] }} {{ caddy['basic_auth_pass_hash'] }}
    }
{%- endif %}

    reverse_proxy * phpldapadmin:80

    log {
        output file /var/log/caddy/ldapadmin.{{ conf['domain'] }}.log
    }
}

redmine.{{ conf['domain'] }}:443 {
{% if generate_service_certs is defined -%}
{%- if generate_service_certs is sameas true %}
    tls /etc/pki/tls/certs/redmine.{{ conf['domain'] }}.crt /etc/pki/tls/private/redmine.{{ conf['domain'] }}.key
{%- endif -%}
{%- endif %}

{% if (caddy['basic_auth_user'] is defined) and (caddy['basic_auth_pass_hash'] is defined) -%}
    basicauth {
        {{ caddy['basic_auth_user'] }} {{ caddy['basic_auth_pass_hash'] }}
    }
{%- endif %}

    reverse_proxy * redmine:3000

    log {
        output file /var/log/caddy/redmine.{{ conf['domain'] }}.log
    }
}

mail.{{ conf['domain'] }}:443 {
{% if generate_service_certs is defined -%}
{%- if generate_service_certs is sameas true %}
    tls /etc/pki/tls/certs/mail.{{ conf['domain'] }}.crt /etc/pki/tls/private/mail.{{ conf['domain'] }}.key
{%- endif -%}
{%- endif %}

{% if (caddy['basic_auth_user'] is defined) and (caddy['basic_auth_pass_hash'] is defined) -%}
    basicauth {
        {{ caddy['basic_auth_user'] }} {{ caddy['basic_auth_pass_hash'] }}
    }
{%- endif %}

    reverse_proxy * roundcube:80

    log {
        output file /var/log/caddy/mail.{{ conf['domain'] }}.log
    }
}

excalidraw.{{ conf['domain'] }}:443 {
{% if generate_service_certs is defined -%}
{%- if generate_service_certs is sameas true %}
    tls /etc/pki/tls/certs/excalidraw.{{ conf['domain'] }}.crt /etc/pki/tls/private/excalidraw.{{ conf['domain'] }}.key
{%- endif -%}
{%- endif %}

{% if (caddy['basic_auth_user'] is defined) and (caddy['basic_auth_pass_hash'] is defined) -%}
    basicauth {
        {{ caddy['basic_auth_user'] }} {{ caddy['basic_auth_pass_hash'] }}
    }
{%- endif %}

    reverse_proxy * excalidraw:80

    log {
        output file /var/log/caddy/excalidraw.{{ conf['domain'] }}.log
    }
}

nextcloud.{{ conf['domain'] }}:443 {
{% if generate_service_certs is defined -%}
{%- if generate_service_certs is sameas true %}
    tls /etc/pki/tls/certs/nextcloud.{{ conf['domain'] }}.crt /etc/pki/tls/private/nextcloud.{{ conf['domain'] }}.key
{%- endif -%}
{%- endif %}

{% if (caddy['basic_auth_user'] is defined) and (caddy['basic_auth_pass_hash'] is defined) -%}
    basicauth {
        {{ caddy['basic_auth_user'] }} {{ caddy['basic_auth_pass_hash'] }}
    }
{%- endif %}

    reverse_proxy * nextcloud:80

    log {
        output file /var/log/caddy/nextcloud.{{ conf['domain'] }}.log
    }
}

portainer.{{ conf['domain'] }}:443 {
{% if generate_service_certs is defined -%}
{%- if generate_service_certs is sameas true %}
    tls /etc/pki/tls/certs/portainer.{{ conf['domain'] }}.crt /etc/pki/tls/private/portainer.{{ conf['domain'] }}.key
{%- endif -%}
{%- endif %}

{% if (caddy['basic_auth_user'] is defined) and (caddy['basic_auth_pass_hash'] is defined) -%}
    basicauth {
        {{ caddy['basic_auth_user'] }} {{ caddy['basic_auth_pass_hash'] }}
    }
{%- endif %}

    reverse_proxy * portainer:9000

    log {
        output file /var/log/caddy/portainer.{{ conf['domain'] }}.log
    }
}

onlyoffice.{{ conf['domain'] }}:443 {
{% if generate_service_certs is defined -%}
{%- if generate_service_certs is sameas true %}
    tls /etc/pki/tls/certs/onlyoffice.{{ conf['domain'] }}.crt /etc/pki/tls/private/onlyoffice.{{ conf['domain'] }}.key
{%- endif -%}
{%- endif %}

{% if (caddy['basic_auth_user'] is defined) and (caddy['basic_auth_pass_hash'] is defined) -%}
    basicauth {
        {{ caddy['basic_auth_user'] }} {{ caddy['basic_auth_pass_hash'] }}
    }
{%- endif %}

    reverse_proxy * nextcloud_onlyoffice_ds:80

    log {
        output file /var/log/caddy/onlyoffice.{{ conf['domain'] }}.log
    }
}

drawio.{{ conf['domain'] }}:443 {
{% if generate_service_certs is defined -%}
{%- if generate_service_certs is sameas true %}
    tls /etc/pki/tls/certs/drawio.{{ conf['domain'] }}.crt /etc/pki/tls/private/drawio.{{ conf['domain'] }}.key
{%- endif -%}
{%- endif %}

{% if (caddy['basic_auth_user'] is defined) and (caddy['basic_auth_pass_hash'] is defined) -%}
    basicauth {
        {{ caddy['basic_auth_user'] }} {{ caddy['basic_auth_pass_hash'] }}
    }
{%- endif %}

    reverse_proxy * nextcloud_drawio:8080

    log {
        output file /var/log/caddy/drawio.{{ conf['domain'] }}.log
    }
}

gitlab.{{ conf['domain'] }}:443 {
{% if generate_service_certs is defined -%}
{%- if generate_service_certs is sameas true %}
    tls /etc/pki/tls/certs/gitlab.{{ conf['domain'] }}.crt /etc/pki/tls/private/gitlab.{{ conf['domain'] }}.key
{%- endif -%}
{%- endif %}

{% if (caddy['basic_auth_user'] is defined) and (caddy['basic_auth_pass_hash'] is defined) -%}
    basicauth {
        {{ caddy['basic_auth_user'] }} {{ caddy['basic_auth_pass_hash'] }}
    }
{%- endif %}

    reverse_proxy * gitlab:443 {
        transport http {
            tls
            tls_insecure_skip_verify
        }
    }

    log {
        output file /var/log/caddy/gitlab.{{ conf['domain'] }}.log
    }
}

mattermost.{{ conf['domain'] }}:443 {
{% if generate_service_certs is defined -%}
{%- if generate_service_certs is sameas true %}
    tls /etc/pki/tls/certs/mattermost.{{ conf['domain'] }}.crt /etc/pki/tls/private/mattermost.{{ conf['domain'] }}.key
{%- endif -%}
{%- endif %}

{% if (caddy['basic_auth_user'] is defined) and (caddy['basic_auth_pass_hash'] is defined) -%}
    basicauth {
        {{ caddy['basic_auth_user'] }} {{ caddy['basic_auth_pass_hash'] }}
    }
{%- endif %}

    reverse_proxy * mattermost:443 {
        transport http {
            tls
            tls_insecure_skip_verify
        }
    }

    log {
        output file /var/log/caddy/mattermost.{{ conf['domain'] }}.log
    }
}

registry.{{ conf['domain'] }}:443 {
{% if generate_service_certs is defined -%}
{%- if generate_service_certs is sameas true %}
    tls /etc/pki/tls/certs/registry.{{ conf['domain'] }}.crt /etc/pki/tls/private/registry.{{ conf['domain'] }}.key
{%- endif -%}
{%- endif %}

{% if (caddy['basic_auth_user'] is defined) and (caddy['basic_auth_pass_hash'] is defined) -%}
    basicauth {
        {{ caddy['basic_auth_user'] }} {{ caddy['basic_auth_pass_hash'] }}
    }
{%- endif %}

    reverse_proxy * registry:443 {
        transport http {
            tls
            tls_insecure_skip_verify
        }
    }

    log {
        output file /var/log/caddy/registry.{{ conf['domain'] }}.log
    }
}

adminer.{{ conf['domain'] }}:443 {
{% if generate_service_certs is defined -%}
{%- if generate_service_certs is sameas true %}
    tls /etc/pki/tls/certs/adminer.{{ conf['domain'] }}.crt /etc/pki/tls/private/adminer.{{ conf['domain'] }}.key
{%- endif -%}
{%- endif %}

{% if (caddy['basic_auth_user'] is defined) and (caddy['basic_auth_pass_hash'] is defined) -%}
    basicauth {
        {{ caddy['basic_auth_user'] }} {{ caddy['basic_auth_pass_hash'] }}
    }
{%- endif %}

    reverse_proxy * adminer:8080

    log {
        output file /var/log/caddy/adminer.{{ conf['domain'] }}.log
    }
}

grafana.{{ conf['domain'] }}:443 {
{% if generate_service_certs is defined -%}
{%- if generate_service_certs is sameas true %}
    tls /etc/pki/tls/certs/grafana.{{ conf['domain'] }}.crt /etc/pki/tls/private/grafana.{{ conf['domain'] }}.key
{%- endif -%}
{%- endif %}

{% if (caddy['basic_auth_user'] is defined) and (caddy['basic_auth_pass_hash'] is defined) -%}
    basicauth {
        {{ caddy['basic_auth_user'] }} {{ caddy['basic_auth_pass_hash'] }}
    }
{%- endif %}

    reverse_proxy http://grafana:3000

    log {
        output file /var/log/caddy/grafana.{{ conf['domain'] }}.log
    }
}
